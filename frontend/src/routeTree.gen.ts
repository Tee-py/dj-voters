/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as DashboardVotersImport } from './routes/dashboard.voters'

// Create Virtual Routes

const AuthenticateLazyImport = createFileRoute('/authenticate')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AuthenticateLazyRoute = AuthenticateLazyImport.update({
  path: '/authenticate',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/authenticate.lazy').then((d) => d.Route))

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DashboardVotersRoute = DashboardVotersImport.update({
  path: '/voters',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/authenticate': {
      id: '/authenticate'
      path: '/authenticate'
      fullPath: '/authenticate'
      preLoaderRoute: typeof AuthenticateLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/voters': {
      id: '/dashboard/voters'
      path: '/voters'
      fullPath: '/dashboard/voters'
      preLoaderRoute: typeof DashboardVotersImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardVotersRoute: typeof DashboardVotersRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardVotersRoute: DashboardVotersRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/authenticate': typeof AuthenticateLazyRoute
  '/dashboard/voters': typeof DashboardVotersRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/authenticate': typeof AuthenticateLazyRoute
  '/dashboard/voters': typeof DashboardVotersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/authenticate': typeof AuthenticateLazyRoute
  '/dashboard/voters': typeof DashboardVotersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard' | '/authenticate' | '/dashboard/voters'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/authenticate' | '/dashboard/voters'
  id: '__root__' | '/' | '/dashboard' | '/authenticate' | '/dashboard/voters'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  AuthenticateLazyRoute: typeof AuthenticateLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DashboardRoute: DashboardRouteWithChildren,
  AuthenticateLazyRoute: AuthenticateLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/authenticate"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/voters"
      ]
    },
    "/authenticate": {
      "filePath": "authenticate.lazy.tsx"
    },
    "/dashboard/voters": {
      "filePath": "dashboard.voters.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
